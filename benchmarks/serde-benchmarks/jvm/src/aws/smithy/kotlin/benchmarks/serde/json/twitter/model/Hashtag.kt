/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0.
 */

// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.smithy.kotlin.benchmarks.serde.json.twitter.model

class Hashtag private constructor(builder: BuilderImpl) {
    val indices: List<Int>? = builder.indices
    val text: String? = builder.text

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Hashtag = BuilderImpl().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("Hashtag(")
        append("indices=$indices,")
        append("text=$text)")
    }

    override fun hashCode(): kotlin.Int {
        var result = indices?.hashCode() ?: 0
        result = 31 * result + (text?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Hashtag

        if (indices != other.indices) return false
        if (text != other.text) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Hashtag = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Hashtag
        fun indices(indices: List<Int>): FluentBuilder
        fun text(text: String): FluentBuilder
    }

    interface DslBuilder {
        var indices: List<Int>?
        var text: String?

        fun build(): Hashtag
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var indices: List<Int>? = null
        override var text: String? = null

        constructor(x: Hashtag) : this() {
            this.indices = x.indices
            this.text = x.text
        }

        override fun build(): Hashtag = Hashtag(this)
        override fun indices(indices: List<Int>): FluentBuilder = apply { this.indices = indices }
        override fun text(text: String): FluentBuilder = apply { this.text = text }
    }
}
