/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0.
 */

// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.smithy.kotlin.benchmarks.serde.json.twitter.transform

import aws.smithy.kotlin.benchmarks.serde.json.twitter.model.Entities
import aws.smithy.kotlin.benchmarks.serde.json.twitter.model.Hashtag
import aws.smithy.kotlin.benchmarks.serde.json.twitter.model.Media
import aws.smithy.kotlin.benchmarks.serde.json.twitter.model.Url
import aws.smithy.kotlin.benchmarks.serde.json.twitter.model.UserMention
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName

internal suspend fun deserializeEntitiesDocument(deserializer: Deserializer): Entities {
    val builder = Entities.builder()
    val HASHTAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("hashtags"))
    val MEDIA_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("media"))
    val URLS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("urls"))
    val USERMENTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("user_mentions"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(HASHTAGS_DESCRIPTOR)
        field(MEDIA_DESCRIPTOR)
        field(URLS_DESCRIPTOR)
        field(USERMENTIONS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                HASHTAGS_DESCRIPTOR.index ->
                    builder.hashtags =
                        deserializer.deserializeList(HASHTAGS_DESCRIPTOR) {
                            val col0 = mutableListOf<Hashtag>()
                            while (hasNextElement()) {
                                val el0 = if (nextHasValue()) { deserializeHashtagDocument(deserializer) } else { deserializeNull(); continue }
                                col0.add(el0)
                            }
                            col0
                        }
                MEDIA_DESCRIPTOR.index ->
                    builder.media =
                        deserializer.deserializeList(MEDIA_DESCRIPTOR) {
                            val col0 = mutableListOf<Media>()
                            while (hasNextElement()) {
                                val el0 = if (nextHasValue()) { deserializeMediaDocument(deserializer) } else { deserializeNull(); continue }
                                col0.add(el0)
                            }
                            col0
                        }
                URLS_DESCRIPTOR.index ->
                    builder.urls =
                        deserializer.deserializeList(URLS_DESCRIPTOR) {
                            val col0 = mutableListOf<Url>()
                            while (hasNextElement()) {
                                val el0 = if (nextHasValue()) { deserializeUrlDocument(deserializer) } else { deserializeNull(); continue }
                                col0.add(el0)
                            }
                            col0
                        }
                USERMENTIONS_DESCRIPTOR.index ->
                    builder.userMentions =
                        deserializer.deserializeList(USERMENTIONS_DESCRIPTOR) {
                            val col0 = mutableListOf<UserMention>()
                            while (hasNextElement()) {
                                val el0 = if (nextHasValue()) { deserializeUserMentionDocument(deserializer) } else { deserializeNull(); continue }
                                col0.add(el0)
                            }
                            col0
                        }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
