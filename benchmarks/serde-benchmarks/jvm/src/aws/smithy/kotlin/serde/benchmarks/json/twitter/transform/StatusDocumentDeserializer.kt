/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0.
 */

// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.smithy.kotlin.serde.benchmarks.json.twitter.transform

import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.serde.benchmarks.json.twitter.model.Status

internal suspend fun deserializeStatusDocument(deserializer: Deserializer): Status {
    val builder = Status.builder()
    val CREATEDAT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("created_at"))
    val ENTITIES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("entities"))
    val FAVORITED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, JsonSerialName("favorited"))
    val ID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Long, JsonSerialName("id"))
    val IDSTR_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("id_str"))
    val POSSIBLYSENSITIVE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, JsonSerialName("possibly_sensitive"))
    val RETWEETCOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, JsonSerialName("retweet_count"))
    val RETWEETED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, JsonSerialName("retweeted"))
    val SOURCE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("source"))
    val TEXT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("text"))
    val TRUNCATED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, JsonSerialName("truncated"))
    val USER_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("user"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(CREATEDAT_DESCRIPTOR)
        field(ENTITIES_DESCRIPTOR)
        field(FAVORITED_DESCRIPTOR)
        field(ID_DESCRIPTOR)
        field(IDSTR_DESCRIPTOR)
        field(POSSIBLYSENSITIVE_DESCRIPTOR)
        field(RETWEETCOUNT_DESCRIPTOR)
        field(RETWEETED_DESCRIPTOR)
        field(SOURCE_DESCRIPTOR)
        field(TEXT_DESCRIPTOR)
        field(TRUNCATED_DESCRIPTOR)
        field(USER_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CREATEDAT_DESCRIPTOR.index -> builder.createdAt = deserializeString()
                ENTITIES_DESCRIPTOR.index -> builder.entities = deserializeEntitiesDocument(deserializer)
                FAVORITED_DESCRIPTOR.index -> builder.favorited = deserializeBoolean()
                ID_DESCRIPTOR.index -> builder.id = deserializeLong()
                IDSTR_DESCRIPTOR.index -> builder.idStr = deserializeString()
                POSSIBLYSENSITIVE_DESCRIPTOR.index -> builder.possiblySensitive = deserializeBoolean()
                RETWEETCOUNT_DESCRIPTOR.index -> builder.retweetCount = deserializeInt()
                RETWEETED_DESCRIPTOR.index -> builder.retweeted = deserializeBoolean()
                SOURCE_DESCRIPTOR.index -> builder.source = deserializeString()
                TEXT_DESCRIPTOR.index -> builder.text = deserializeString()
                TRUNCATED_DESCRIPTOR.index -> builder.truncated = deserializeBoolean()
                USER_DESCRIPTOR.index -> builder.user = deserializeUserDocument(deserializer)
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
