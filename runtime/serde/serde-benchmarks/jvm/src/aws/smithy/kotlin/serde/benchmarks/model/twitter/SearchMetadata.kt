/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0.
 */

// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.smithy.kotlin.serde.benchmarks.model.twitter



class SearchMetadata private constructor(builder: BuilderImpl) {
    val completedIn: Double? = builder.completedIn
    val count: Int? = builder.count
    val maxId: Long? = builder.maxId
    val maxIdStr: String? = builder.maxIdStr
    val nextResults: String? = builder.nextResults
    val query: String? = builder.query
    val refreshUrl: String? = builder.refreshUrl
    val sinceId: Int? = builder.sinceId
    val sinceIdStr: String? = builder.sinceIdStr

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): SearchMetadata = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("SearchMetadata(")
        append("completedIn=$completedIn,")
        append("count=$count,")
        append("maxId=$maxId,")
        append("maxIdStr=$maxIdStr,")
        append("nextResults=$nextResults,")
        append("query=$query,")
        append("refreshUrl=$refreshUrl,")
        append("sinceId=$sinceId,")
        append("sinceIdStr=$sinceIdStr)")
    }

    override fun hashCode(): kotlin.Int {
        var result = completedIn?.hashCode() ?: 0
        result = 31 * result + (count ?: 0)
        result = 31 * result + (maxId?.hashCode() ?: 0)
        result = 31 * result + (maxIdStr?.hashCode() ?: 0)
        result = 31 * result + (nextResults?.hashCode() ?: 0)
        result = 31 * result + (query?.hashCode() ?: 0)
        result = 31 * result + (refreshUrl?.hashCode() ?: 0)
        result = 31 * result + (sinceId ?: 0)
        result = 31 * result + (sinceIdStr?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as SearchMetadata

        if (completedIn != other.completedIn) return false
        if (count != other.count) return false
        if (maxId != other.maxId) return false
        if (maxIdStr != other.maxIdStr) return false
        if (nextResults != other.nextResults) return false
        if (query != other.query) return false
        if (refreshUrl != other.refreshUrl) return false
        if (sinceId != other.sinceId) return false
        if (sinceIdStr != other.sinceIdStr) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): SearchMetadata = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): SearchMetadata
        fun completedIn(completedIn: Double): FluentBuilder
        fun count(count: Int): FluentBuilder
        fun maxId(maxId: Long): FluentBuilder
        fun maxIdStr(maxIdStr: String): FluentBuilder
        fun nextResults(nextResults: String): FluentBuilder
        fun query(query: String): FluentBuilder
        fun refreshUrl(refreshUrl: String): FluentBuilder
        fun sinceId(sinceId: Int): FluentBuilder
        fun sinceIdStr(sinceIdStr: String): FluentBuilder
    }

    interface DslBuilder {
        var completedIn: Double?
        var count: Int?
        var maxId: Long?
        var maxIdStr: String?
        var nextResults: String?
        var query: String?
        var refreshUrl: String?
        var sinceId: Int?
        var sinceIdStr: String?

        fun build(): SearchMetadata
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var completedIn: Double? = null
        override var count: Int? = null
        override var maxId: Long? = null
        override var maxIdStr: String? = null
        override var nextResults: String? = null
        override var query: String? = null
        override var refreshUrl: String? = null
        override var sinceId: Int? = null
        override var sinceIdStr: String? = null

        constructor(x: SearchMetadata) : this() {
            this.completedIn = x.completedIn
            this.count = x.count
            this.maxId = x.maxId
            this.maxIdStr = x.maxIdStr
            this.nextResults = x.nextResults
            this.query = x.query
            this.refreshUrl = x.refreshUrl
            this.sinceId = x.sinceId
            this.sinceIdStr = x.sinceIdStr
        }

        override fun build(): SearchMetadata = SearchMetadata(this)
        override fun completedIn(completedIn: Double): FluentBuilder = apply { this.completedIn = completedIn }
        override fun count(count: Int): FluentBuilder = apply { this.count = count }
        override fun maxId(maxId: Long): FluentBuilder = apply { this.maxId = maxId }
        override fun maxIdStr(maxIdStr: String): FluentBuilder = apply { this.maxIdStr = maxIdStr }
        override fun nextResults(nextResults: String): FluentBuilder = apply { this.nextResults = nextResults }
        override fun query(query: String): FluentBuilder = apply { this.query = query }
        override fun refreshUrl(refreshUrl: String): FluentBuilder = apply { this.refreshUrl = refreshUrl }
        override fun sinceId(sinceId: Int): FluentBuilder = apply { this.sinceId = sinceId }
        override fun sinceIdStr(sinceIdStr: String): FluentBuilder = apply { this.sinceIdStr = sinceIdStr }
    }
}
