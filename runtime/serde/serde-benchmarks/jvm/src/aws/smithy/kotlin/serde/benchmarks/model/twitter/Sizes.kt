/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0.
 */

// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.smithy.kotlin.serde.benchmarks.model.twitter



class Sizes private constructor(builder: BuilderImpl) {
    val large: Large? = builder.large
    val medium: Medium? = builder.medium
    val small: Small? = builder.small
    val thumb: Thumb? = builder.thumb

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Sizes = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Sizes(")
        append("large=$large,")
        append("medium=$medium,")
        append("small=$small,")
        append("thumb=$thumb)")
    }

    override fun hashCode(): kotlin.Int {
        var result = large?.hashCode() ?: 0
        result = 31 * result + (medium?.hashCode() ?: 0)
        result = 31 * result + (small?.hashCode() ?: 0)
        result = 31 * result + (thumb?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Sizes

        if (large != other.large) return false
        if (medium != other.medium) return false
        if (small != other.small) return false
        if (thumb != other.thumb) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Sizes = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Sizes
        fun large(large: Large): FluentBuilder
        fun medium(medium: Medium): FluentBuilder
        fun small(small: Small): FluentBuilder
        fun thumb(thumb: Thumb): FluentBuilder
    }

    interface DslBuilder {
        var large: Large?
        var medium: Medium?
        var small: Small?
        var thumb: Thumb?

        fun build(): Sizes
        /**
         * construct an [aws.smithy.kotlin.serde.benchmarks.model.Large] inside the given [block]
         */
        fun large(block: Large.DslBuilder.() -> kotlin.Unit) {
            this.large = Large.invoke(block)
        }
        /**
         * construct an [aws.smithy.kotlin.serde.benchmarks.model.Medium] inside the given [block]
         */
        fun medium(block: Medium.DslBuilder.() -> kotlin.Unit) {
            this.medium = Medium.invoke(block)
        }
        /**
         * construct an [aws.smithy.kotlin.serde.benchmarks.model.Small] inside the given [block]
         */
        fun small(block: Small.DslBuilder.() -> kotlin.Unit) {
            this.small = Small.invoke(block)
        }
        /**
         * construct an [aws.smithy.kotlin.serde.benchmarks.model.Thumb] inside the given [block]
         */
        fun thumb(block: Thumb.DslBuilder.() -> kotlin.Unit) {
            this.thumb = Thumb.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var large: Large? = null
        override var medium: Medium? = null
        override var small: Small? = null
        override var thumb: Thumb? = null

        constructor(x: Sizes) : this() {
            this.large = x.large
            this.medium = x.medium
            this.small = x.small
            this.thumb = x.thumb
        }

        override fun build(): Sizes = Sizes(this)
        override fun large(large: Large): FluentBuilder = apply { this.large = large }
        override fun medium(medium: Medium): FluentBuilder = apply { this.medium = medium }
        override fun small(small: Small): FluentBuilder = apply { this.small = small }
        override fun thumb(thumb: Thumb): FluentBuilder = apply { this.thumb = thumb }
    }
}
